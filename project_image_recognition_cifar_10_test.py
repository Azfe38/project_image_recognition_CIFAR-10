# -*- coding: utf-8 -*-
"""project_image_recognition_CIFAR-10_TEST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dsnYiJ8lIXeF8Dd9STWzlgCj4_J6e_Hi
"""

!git clone https://github.com/Azfe38/project_image_recognition_CIFAR-10

from google.colab import drive
drive.mount('/content/drive')

ls

cd project_image_recognition_CIFAR-10/

def unpickle(file):
    import pickle
    with open(file, 'rb') as fo:
        cifar_dict = pickle.load(fo, encoding='bytes')
    return cifar_dict

veri_isimleri = ['batches.meta','data_batch_1','data_batch_2','data_batch_3','data_batch_4','data_batch_5','test_batch']

all_data = [0,1,2,3,4,5,6]

yol = 'cifar-10-batches-py/'

for i,direc in zip(all_data,veri_isimleri):
    all_data[i] = unpickle(yol+direc)

batch_meta = all_data[0]
data_batch1 = all_data[1]
data_batch2 = all_data[2]
data_batch3 = all_data[3]
data_batch4 = all_data[4]
data_batch5 = all_data[5]
test_batch = all_data[6]

batch_meta

data_batch1.keys()

import matplotlib.pyplot as plt
get_ipython().magic('matplotlib inline')

import numpy as np

X = data_batch1[b"data"]

X = X.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype("uint8")

X[0].max()

(X[0]/255).max()

plt.imshow(X[0])

plt.imshow(X[1])

plt.imshow(X[4])

def one_hot_encode(vec, vals=10):
    '''
    For use to one-hot encode the 10- possible labels
    '''
    n = len(vec)
    out = np.zeros((n, vals))
    out[range(n), vec] = 1
    return out

class CifarHelper():

    def __init__(self):
        self.i = 0

        self.all_train_batches = [data_batch1,data_batch2,data_batch3,data_batch4,data_batch5]
        self.test_batch = [test_batch]

        self.training_images = None
        self.training_labels = None

        self.test_images = None
        self.test_labels = None

    def set_up_images(self):

        print("Setting Up Training Images and Labels")

        self.training_images = np.vstack([d[b"data"] for d in self.all_train_batches])
        train_len = len(self.training_images)

        self.training_images = self.training_images.reshape(train_len,3,32,32).transpose(0,2,3,1)/255
        self.training_labels = one_hot_encode(np.hstack([d[b"labels"] for d in self.all_train_batches]), 10)

        print("Setting Up Test Images and Labels")

        self.test_images = np.vstack([d[b"data"] for d in self.test_batch])
        test_len = len(self.test_images)

        self.test_images = self.test_images.reshape(test_len,3,32,32).transpose(0,2,3,1)/255
        self.test_labels = one_hot_encode(np.hstack([d[b"labels"] for d in self.test_batch]), 10)


    def next_batch(self, batch_size):
        x = self.training_images[self.i:self.i+batch_size].reshape(100,32,32,3)
        y = self.training_labels[self.i:self.i+batch_size]
        self.i = (self.i + batch_size) % len(self.training_images)
        return x, y

ch = CifarHelper()
ch.set_up_images()

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

x = tf.placeholder(tf.float32,shape=[None,32,32,3])
y_true = tf.placeholder(tf.float32,shape=[None,10])

hold_prob = tf.placeholder(tf.float32)

def init_weights(shape):
    init_random_dist = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(init_random_dist)

def init_bias(shape):
    init_bias_vals = tf.constant(0.1, shape=shape)
    return tf.Variable(init_bias_vals)

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2by2(x):
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                          strides=[1, 2, 2, 1], padding='SAME')

def convolutional_layer(input_x, shape):
    W = init_weights(shape)
    b = init_bias([shape[3]])
    return tf.nn.relu(conv2d(input_x, W) + b)

def normal_full_layer(input_layer, size):
    input_size = int(input_layer.get_shape()[1])
    W = init_weights([input_size, size])
    b = init_bias([size])
    return tf.matmul(input_layer, W) + b

convo_1 = convolutional_layer(x,shape=[4,4,3,32])
convo_1_pooling = max_pool_2by2(convo_1)

convo_2 = convolutional_layer(convo_1_pooling,shape=[4,4,32,64])
convo_2_pooling = max_pool_2by2(convo_2)

convo_2_flat = tf.reshape(convo_2_pooling,[-1,8*8*64])

full_layer_one = tf.nn.relu(normal_full_layer(convo_2_flat,1024))

full_one_dropout = tf.nn.dropout(full_layer_one,keep_prob=hold_prob)

y_pred = normal_full_layer(full_one_dropout,10)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_pred))

optimizer = tf.train.AdamOptimizer(learning_rate=0.001)
train = optimizer.minimize(cross_entropy)

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

"""Optimizasyon parametrelerini ve Optimizasyon algoritmalarını değitiriyoruz."""

optimizer_2 = tf.train.AdadeltaOptimizer(learning_rate=0.001)
train = optimizer_2.minimize(cross_entropy)

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_3 = tf.train.GradientDescentOptimizer(learning_rate=0.001)
train = optimizer_3.minimize(cross_entropy)

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_4 = tf.train.AdamOptimizer(learning_rate=0.005)
train = optimizer_4.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_5 = tf.train.AdadeltaOptimizer(learning_rate=0.005)
train = optimizer_5.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_6 = tf.train.GradientDescentOptimizer(learning_rate=0.005)
train = optimizer_6.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_7 = tf.train.AdamOptimizer(learning_rate=0.01)
train = optimizer_7.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_8 = tf.train.AdamOptimizer(learning_rate=0.0001)
train = optimizer_8.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_9 = tf.train.AdamOptimizer(learning_rate=0.0001)
train = optimizer_9.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_10 = tf.train.AdamOptimizer(learning_rate=0.1)
train = optimizer_10.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_11 = tf.train.AdadeltaOptimizer(learning_rate=0.0001)
train = optimizer_11.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_12 = tf.train.GradientDescentOptimizer(learning_rate=0.0001)
train = optimizer_12.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

"""1. bölüm"""

optimizer_13 = tf.train.GradientDescentOptimizer(learning_rate=0.0001)
train = optimizer_13.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_14 = tf.train.AdadeltaOptimizer(learning_rate=0.0001)
train = optimizer_14.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_15 = tf.train.AdadeltaOptimizer(learning_rate=0.1)
train = optimizer_15.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_16 = tf.train.AdadeltaOptimizer(learning_rate=0.01)
train = optimizer_16.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_17 = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train = optimizer_17.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_18 = tf.train.GradientDescentOptimizer(learning_rate=0.1)
train = optimizer_18.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(5001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_19 = tf.train.AdamOptimizer(learning_rate=0.001)
train = optimizer_19.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_20 = tf.train.AdamOptimizer(learning_rate=0.01)
train = optimizer_20.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_21 = tf.train.AdamOptimizer(learning_rate=0.1)
train = optimizer_21.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_22 = tf.train.GradientDescentOptimizer(learning_rate=0.1)
train = optimizer_22.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_23 = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train = optimizer_23.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_24 = tf.train.GradientDescentOptimizer(learning_rate=0.001)
train = optimizer_24.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_25 = tf.train.AdadeltaOptimizer(learning_rate=0.001)
train = optimizer_25.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_26 = tf.train.AdadeltaOptimizer(learning_rate=0.01)
train = optimizer_26.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

optimizer_27 = tf.train.AdadeltaOptimizer(learning_rate=0.1)
train = optimizer_27.minimize(cross_entropy)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    max_acc = 0

    for i in range(10001):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})


        if i%100 == 0:

            print('Adım {}'.format(i))
            print('Model Dogrulugu = ')

            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            acc_value = sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0})

            if acc_value > max_acc:
              max_acc = acc_value
            print(acc_value)
            print('Max acc = ', max_acc)
            print('\n')

ls

cd

cd ..

from google.colab import files
!zip -r /content/project_image_recognition_CIFAR-10_TEST_FARUK.zip /content/project_image_recognition_CIFAR-10_TEST_FARUK



import shutil
colab_link = "/content/project_image_recognition_CIFAR-10_TEST_FARUK.zip"
gdrive_link = "/content/drive/MyDrive"
shutil.copy(colab_link, gdrive_link)

